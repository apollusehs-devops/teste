/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5ea8cb8382f82d390e77f827
*
* You will get 10% discount for each one of your friends
* 
*/
package com.skaffolder_teste.controller.base;

import java.util.List;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.http.ResponseEntity;
import org.modelmapper.ModelMapper;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.springframework.security.access.annotation.Secured;
import org.springframework.beans.factory.annotation.Autowired;
import com.skaffolder_teste.db.teste_db.service.ClienteService;
import com.skaffolder_teste.db.teste_db.entity.Cliente;
import com.skaffolder_teste.db.teste_db.dtos.ClienteDto;

import com.skaffolder_teste.db.teste_db.entity.User;

//IMPORT RELATIONS

import com.skaffolder_teste.db.teste_db.service.UserService;


public class ClienteBaseController {
    
    @Autowired
	ClienteService clienteService;

	
	@Autowired
	UserService userService;
	

	@Autowired
	private ModelMapper modelMapper;



//CRUD METHODS


    //CRUD - CREATE
    @Secured({ "ROLE_PRIVATE_USER" })
	@PostMapping("/cliente")
	public ResponseEntity<ClienteDto> insert(@RequestBody Cliente obj) {
				
		//external relation Cliente_User
		if (obj.getCliente_User() != null) {
			if (obj.getCliente_User().get_id() == null)
				userService.insert(obj.getCliente_User());
			else
				userService.insert(userService.getOne(obj.getCliente_User().get_id()));
		}
				
		
		return ResponseEntity.ok().body(convertToDto(clienteService.insert(obj)));
	}

	
    //CRUD - REMOVE
    @Secured({ "ROLE_PRIVATE_USER" })
	@DeleteMapping("/cliente/{id}")
	public ResponseEntity<Void> delete(@PathVariable("id") Long id) {
		Cliente clienteSelected = clienteService.getOne(id);
		
		
		clienteService.delete(id);
		return ResponseEntity.ok().build();
	}
	
    //CRUD - FIND BY Cliente_User
    
	@GetMapping("/cliente/findByCliente_User/{key}")
	public ResponseEntity<List<ClienteDto>> findByCliente_User(@PathVariable("key") Long id) {
		
		User user = userService.getOne(id);
		List<Cliente> clientes = clienteService.findByCliente_User(user);
		List<ClienteDto> clientesDto = clientes.stream()
				.map(cliente -> convertToDto(cliente))
				.collect(Collectors.toList());
		
		

		return ResponseEntity.ok().body(clientesDto);
	}
	
    //CRUD - GET ONE
    @Secured({ "ROLE_PRIVATE_USER" })
	@GetMapping("/cliente/{id}")
	public ResponseEntity<ClienteDto> get(@PathVariable("id") Long id) {
		Cliente clienteSelected = clienteService.getOne(id);
		return ResponseEntity.ok().body(convertToDto(clienteSelected));
	}
	
	
    //CRUD - GET LIST
    @Secured({ "ROLE_PRIVATE_USER" })
	@GetMapping("/cliente")
	public ResponseEntity<List<ClienteDto>> getList() {
		List<Cliente> list = clienteService.getAll();
		List<ClienteDto> listDto = list.stream()
				.map(cliente -> convertToDto(cliente))
				.collect(Collectors.toList());
		return ResponseEntity.ok().body(listDto);
	}


    //CRUD - EDIT
    @Secured({ "ROLE_PRIVATE_USER" })
	@PostMapping("/cliente/{id}")
	public ResponseEntity<ClienteDto> update(@RequestBody Cliente obj, @PathVariable("id") Long id) {
	    
		//external relation Cliente_User
		if (obj.getCliente_User() != null) {
			if (obj.getCliente_User().get_id() == null)
				userService.insert(obj.getCliente_User());
			else
				userService.insert(userService.getOne(obj.getCliente_User().get_id()));
		}
				
		
		return ResponseEntity.ok().body(convertToDto(clienteService.insert(obj)));
	}
	


/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  Custom.js
 */


	private ClienteDto convertToDto(Cliente cliente) {
		ClienteDto clienteDto = modelMapper.map(cliente, ClienteDto.class);
		return clienteDto;
	}
}
